name: Run unit tests

on:
  # Run tests on push or pull requests to the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  
  # Allow the workflow to be triggered manually
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the runner
    - name: Check out the code
      uses: actions/checkout@v4

    # Set up Python environment
    - name: Set up Python 3.x
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    # Cache Python dependencies
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-python-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-

    # Install dependencies (update this based on your project's requirements)
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y g++ cmake libomp-dev
        python3 -m pip install --upgrade pip
        python3 -m pip install -r requirements.txt

    # Cache and install Eigen
    - name: Cache Eigen
      uses: actions/cache@v3
      with:
        path: eigen/
        key: eigen-cache-v1
        restore-keys: |
          eigen-cache-

    - name: Install Eigen
      run: |
        if [ ! -d "eigen" ]; then
          mkdir -p eigen
          curl -L https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.tar.gz | tar xz --strip-components=1 -C eigen
        fi

    - name: Set pybind11 path
      run: |
        PYBIND11_DIR=$(python -c "import site; import pybind11; print(pybind11.get_cmake_dir())")
        echo "pybind11 found at $PYBIND11_DIR"
        echo "PYBIND11_DIR=$PYBIND11_DIR" >> $GITHUB_ENV  # Export to the environment

    - name: Build the C++ extension
      run: |
        mkdir -p build
        cd build
        cmake -DPYBIND11_DIR=$PYBIND11_DIR ..
        make
    # Step 4: Build the C++ extension
    #- name: Build C++ extension
    #  run: |
    #    set -e  # Fail fast on errors
    #    c++ -O3 -Wall -shared -std=c++17 -fPIC -fopenmp -march=native \
    #    -I ./eigen `python3 -m pybind11 --includes` src/cpp/displacement_calc.cpp \
    #    -o src/python/georeferencer/libdiscalc`python3-config --extension-suffix`

    # Run pytest on the tests directory
    - name: Run tests with pytest
      run: |
        python3 -m pytest ./tests
